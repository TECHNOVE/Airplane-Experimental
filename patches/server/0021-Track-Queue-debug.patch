From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Thu, 25 Feb 2021 20:25:49 -0600
Subject: [PATCH] Track Queue debug


diff --git a/src/main/java/gg/airplane/structs/TrackQueue.java b/src/main/java/gg/airplane/structs/TrackQueue.java
index f1d68088a9378a8a61b398dbbc5b7796dba3d518..f057054e8b55c6525d76fc82b940986509572539 100644
--- a/src/main/java/gg/airplane/structs/TrackQueue.java
+++ b/src/main/java/gg/airplane/structs/TrackQueue.java
@@ -4,6 +4,8 @@ import com.tuinity.tuinity.util.maplist.IteratorSafeOrderedReferenceSet;
 import net.minecraft.server.Chunk;
 import net.minecraft.server.MinecraftServer;
 import org.apache.logging.log4j.Level;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
 
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.ForkJoinPool;
@@ -14,6 +16,28 @@ import java.util.concurrent.atomic.AtomicInteger;
  */
 public class TrackQueue {
 
+    public static boolean debug = false;
+
+    public static class TrackQueueDebugCommand extends Command {
+        protected TrackQueueDebugCommand() {
+            super("trackqueuedebug");
+        }
+
+        public static void register() {
+            MinecraftServer.getServer().server.getCommandMap().register("trackqueuedebug", "Airplane", new TrackQueueDebugCommand());
+        }
+
+        @Override
+        public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+            if (!sender.isOp()) {
+                return false;
+            }
+            debug = !debug;
+            sender.sendMessage("Set debug to: " + debug);
+            return true;
+        }
+    }
+
     private final IteratorSafeOrderedReferenceSet<Chunk> chunks;
     private final ForkJoinPool pool = ForkJoinPool.commonPool();
     private final AtomicInteger taskIndex = new AtomicInteger();
@@ -36,10 +60,23 @@ public class TrackQueue {
             this.pool.execute(this::run);
         }
 
-        while (this.taskIndex.get() < this.chunks.getListSize()) {
-            this.runMainThreadTasks();
-            this.handleTask(); // assist
+        if (debug) {
+            long start = System.currentTimeMillis();
+            while (this.taskIndex.get() < this.chunks.getListSize()) {
+                this.runMainThreadTasks();
+                if (System.currentTimeMillis() - start > 3) {
+                    this.handleTaskDebug(); // assist
+                } else {
+                    this.handleTask(); // assist
+                }
+            }
+        } else {
+            while (this.taskIndex.get() < this.chunks.getListSize()) {
+                this.runMainThreadTasks();
+                this.handleTask(); // assist
+            }
         }
+
         this.runMainThreadTasks(); // finish tasks
     }
 
@@ -77,4 +114,24 @@ public class TrackQueue {
         return false;
     }
 
+    private boolean handleTaskDebug() {
+        int index;
+        System.out.println("Current index: " + this.taskIndex.get() + " chunk count: " + this.chunks.getListSize());
+        while ((index = this.taskIndex.getAndIncrement()) < this.chunks.getListSize()) {
+            Chunk chunk = this.chunks.rawGet(index);
+            System.out.println("Hit chunk at " + index + ": " + (chunk != null));
+            if (chunk != null) {
+                try {
+                    chunk.entityTracker.run();
+                } catch (Throwable t) {
+                    MinecraftServer.LOGGER.log(Level.WARN, "Ticking tracker failed", t);
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+
 }
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 6000be9ba615fbc345dfd24d2974e7b632b6b53b..87a5f7f850a10fb8ef2b1747b26ac8f6d0bdf423 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -171,6 +171,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         // Paper end
         com.tuinity.tuinity.config.TuinityConfig.init((java.io.File) options.valueOf("tuinity-settings")); // Tuinity - Server Config
         gg.airplane.AirplaneConfig.load(); // Airplane - config
+        gg.airplane.structs.TrackQueue.TrackQueueDebugCommand.register(); // Airplane
 
         this.setPVP(dedicatedserverproperties.pvp);
         this.setAllowFlight(dedicatedserverproperties.allowFlight);
